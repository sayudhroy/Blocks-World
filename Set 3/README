Software Used:	Steel Bank Common Lisp (Version 2.20)
				with EMACS Editor (with SLIME integrated)

The required functions are stored in the file named sroy8_src.lisp
with the test cases stored in the file sroy8_test.lisp.

To run the functions, please load the the sroy8_src.lisp first which 
would load all the functions and then load the sroy8_test.lisp to run 
the test cases.

The functions that have been defined:

1. constrain-predicate:
Function that extracts returns a set of tuples of a relation which are bounded by the
tuples of another relation given a set of positions at which they need to be matched or
not matched (depending on whether the predicate is taken itself or its negation is
considered).
Arguments of the function are:
pred - used to store the name of the predicate whose tuples will be returned
constraint - used to store the name of the predicate whose tuples will be used as a
			constraint for the predicate 'pred'
posns - used to store the positions at which the predicate 'pred' will be bounded by the
		predicate 'constraint'
Objective of the function:	The purpose of the function is to retrieve the relations of
							the 'pred' and 'constraint' predicates as stored in the
							global hash-table *kb-ht* and then iterate through the
							relations to find out the qualifying tuples by matching it
							with the positions as specified by the 'posns' list.
							Care has been taken to deal with bad inputs for various cases:
							i) The 'posns' input must be a list
							ii) All elements in the 'posns' list must be numbers
							iii) Both the predicates entered are already keys of *kb-ht*
							iv) If the constraint is entered as a negative fact, it should
							be a list of two elements with the first being 'NOT' and the
							second being the name of the predicate (which exists in *kb-ht*)
							v) The predicate 'pred' should yield a n-ary relation while
							constraint should yield a k-ary relation where k<=n
							
2. name-and-store-relation:
Function to store a new predicate in the global hash-table *kb-ht*.
Arguments of the function are:
pred - used to store the name of the predicate whose tuples will be returned
constraint - used to store the name of the predicate whose tuples will be used as a
			constraint for the predicate 'pred'
posns - used to store the positions at which the predicate 'pred' will be bounded by the
		predicate 'constraint'
reln - the list of tuples retrieved by passing the former three arguments into the
		'constrain-predicate' function (we assume that the input of the user is indeed the
		list of tuples generated by the previous function). Care has not been taken to check
		if the tuples actually do qualify with the two predicates and the positions list as
		it is beyond the scope of the question specifications.
Objective of the function: The purpose of this function is to create a new predicate name
							unique to the arguments passed into it and store that as a new
							fact in *kb-ht* and return the name of the new predicate. It is
							done by converting the names of the symbols to strings and then
							concatenating them into forming a new symbol name for the new
							predicate. The arguments of the predicate will be the list of
							tuples in 'reln' which is retrieved by running the
							'constrain-predicate' function on the first three arguments.

# The following functions were used from Lisp 1
a. store-fact: To store a single fact into a hash table specified by the argument
b. store-facts: Uses mapcar to store a series of facts in a hash-table by calling the
				'store-fact' function.
				PLEASE NOTE: Although the 'store-facts' in Lisp1 used a domain to store 
				the constants of the knowledge base, after consulting with the TA, I decided
				not to use that in this function (in Lisp2), since for the purposes of Lisp2,
				I do not need to store the domain. Thus, I did not want to use an extra
				global parameter (*domain*), and an extra function (extract-constants) 
				to allow for creating the domain.
							
# For simplification of the tasks in hand, the following helper functions were created:
a. update-table: (From Lisp 1) Updates a hash table 'ht' with the key 'pred' and stores a 
				value 'val'.
b. reorder: Reorders a list in the order of the indices as specified in the argument 'posns'.
